const { default: makeWASocket, useMultiFileAuthState, DisconnectReason } = require("baileys");
const qrcode = require('qrcode-terminal');
const fs = require('fs');

const userContext = {};
const adminNumbers = ['59168166901@s.whatsapp.net']; // N√∫meros de administradores
const advisorNumbers = ['59168166901@s.whatsapp.net']; // N√∫meros de asesores

const conectarWhatsapp = async () => {
    console.log('üöÄ CONECTANDO AL SERVIDOR DE WHATSAPP...');
    const { state, saveCreds } = await useMultiFileAuthState('69554690');

    const sock = makeWASocket({
        auth: state,
        printQRInTerminal: false
    });

    // Guardamos la conexi√≥n
    sock.ev.on('creds.update', saveCreds);

    // Generar QR
    sock.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect, qr } = update;

        if (qr) {
            console.log('üì± ¬°Escanea el c√≥digo QR para conectar!');
            qrcode.generate(qr, { small: true });
        }

        if (connection === 'close') {
            const puedeConectar = lastDisconnect.error?.output.statusCode != DisconnectReason.loggedOut;
            console.log('‚ùå Error de conexi√≥n...');
            if (puedeConectar) {
                console.log('üîÑ Reintentando conexi√≥n...');
                setTimeout(conectarWhatsapp, 5000); // Esperar 5 segundos antes de reconectar
            }
        } else if (connection === 'open') {
            console.log('‚úÖ ¬°CONEXI√ìN ESTABLECIDA EXITOSAMENTE!');
        }
    });

    // RECIBIR MENSAJES
    sock.ev.on('messages.upsert', async event => {
        try {
            const mensaje = event.messages[0];
            const type = event.type;
            const id = mensaje.key.remoteJid;
            const phoneNumber = id.replace('@s.whatsapp.net', '');

            // Ignorar mensajes innecesarios
            if (
                type !== 'notify' ||
                mensaje.key.fromMe ||
                id.includes('@g.us') ||
                id.includes('@broadcast')
            ) {
                return;
            }
            
            const mensajeRecibido = mensaje.message?.extendedTextMessage?.text || mensaje.message?.conversation || '';
            const mensajeNormalizado = mensajeRecibido.trim().toLowerCase();

            console.log(`üì® Mensaje de ${phoneNumber}: ${mensajeRecibido}`);

            // ===== SISTEMA DE COMANDOS DE ADMINISTRADOR =====
            if (adminNumbers.includes(id)) {
                if (mensajeNormalizado.startsWith('/stats')) {
                    await enviarEstadisticas(sock, id);
                    return;
                }
                if (mensajeNormalizado.startsWith('/broadcast ')) {
                    const mensaje = mensajeRecibido.substring(11);
                    await enviarMensajeMasivo(sock, mensaje);
                    await sock.sendMessage(id, { text: 'üì¢ Mensaje enviado a todos los usuarios activos' });
                    return;
                }
                if (mensajeNormalizado.startsWith('/reset ')) {
                    const targetPhone = mensajeRecibido.substring(7) + '@s.whatsapp.net';
                    if (userContext[targetPhone]) {
                        delete userContext[targetPhone];
                        await sock.sendMessage(id, { text: `‚úÖ Usuario ${targetPhone} reseteado` });
                    }
                    return;
                }
            }

            // ===== MANEJO DE MENSAJES DESDE QRs ESPEC√çFICOS =====
            
            // QR 1: Info Chatbots
            if (mensajeRecibido === 'Info Chatbots' || mensajeRecibido === 'info Chatbots') {
                inicializarContexto(id);
                await enviarInfoChatbots(sock, id);
                userContext[id].consultoChatbots = true;
                userContext[id].ultimaActividad = Date.now();
                return;
            }

            // QR 2: Proyectos Universitarios  
            if (mensajeRecibido === 'Proyectos Universitarios') {
                inicializarContexto(id);
                await enviarInfoProyectosUniversitarios(sock, id);
                userContext[id].ultimaActividad = Date.now();
                return;
            }

            // QR 3: Desarrollo Web
            if (mensajeRecibido === 'Desarrollo Web') {
                inicializarContexto(id);
                await enviarInfoDesarrolloWeb(sock, id);
                userContext[id].ultimaActividad = Date.now();
                return;
            }

            // QR 4: Info Laravel
            if (mensajeRecibido === 'Info Laravel') {
                inicializarContexto(id);
                await enviarInfoLaravel(sock, id);
                userContext[id].ultimaActividad = Date.now();
                return;
            }

            // ===== COMANDOS ESPECIALES =====
            if (mensajeNormalizado === 'menu' || mensajeNormalizado === 'inicio' || mensajeNormalizado === 'start') {
                inicializarContexto(id);
                await menuSeleccion(sock, id, "main");
                return;
            }

            if (mensajeNormalizado === 'ayuda' || mensajeNormalizado === 'help') {
                await enviarAyuda(sock, id);
                return;
            }

            // ===== INICIALIZAR CONTEXTO PARA NUEVOS USUARIOS =====
            if (!userContext[id]) {
                inicializarContexto(id);
                await enviarBienvenida(sock, id);
                await menuSeleccion(sock, id, "main");
                return;
            }

            // Actualizar √∫ltima actividad
            userContext[id].ultimaActividad = Date.now();

            // ===== ESTADO: CON ASESOR =====
            if (userContext[id].conAsesor) {
                // El bot no responde cuando est√° con asesor
                console.log(`üë§ Usuario ${phoneNumber} est√° siendo atendido por un asesor.`);
                return;
            }

            // ===== MANEJO DEL "SI" PARA DIFERENTES CONTEXTOS =====
            if ((mensajeNormalizado === 'si' || mensajeNormalizado === 's√≠' || mensajeNormalizado === 'inscribirme') && userContext[id].consultoChatbots) {
                await enviarQRPago(sock, id, 'Curso de ChatBots');
                userContext[id].consultoChatbots = false;
                userContext[id].conAsesor = true; // Transferir a asesor despu√©s del pago
                
                // Notificar a asesores sobre inscripci√≥n
                for (const asesor of advisorNumbers) {
                    await sock.sendMessage(asesor, {
                        text: `üí∞ *NUEVA INSCRIPCI√ìN - CURSO CHATBOTS*
                        
üì± Usuario: ${phoneNumber}
‚è∞ Hora: ${new Date().toLocaleString()}
üéì Servicio: Curso de ChatBots

El usuario ya recibi√≥ el QR de pago. Favor realizar seguimiento para completar inscripci√≥n.`
                    });
                }
                return;
            }

            if (mensajeNormalizado === 'si' || mensajeNormalizado === 's√≠') {
                if (userContext[id].esperandoConfirmacion) {
                    await enviarQRPago(sock, id, userContext[id].servicioSolicitado);
                    userContext[id].esperandoConfirmacion = false;
                    userContext[id].conAsesor = true; // Transferir a asesor despu√©s del pago
                    
                    // Notificar a asesores
                    for (const asesor of advisorNumbers) {
                        await sock.sendMessage(asesor, {
                            text: `üí∞ *NUEVA SOLICITUD DE SERVICIO*
                            
üì± Usuario: ${phoneNumber}
‚è∞ Hora: ${new Date().toLocaleString()}
üíº Servicio: ${userContext[id].servicioSolicitado}

El usuario ya recibi√≥ el QR de pago. Favor realizar seguimiento para completar proceso.`
                        });
                    }
                    return;
                }
            }

            // ===== MANEJO DE OPCIONES DE MEN√ö =====
            if (mensajeRecibido === 'A') {
                await enviarInfoChatbots(sock, id);
                userContext[id].consultoChatbots = true;
                return;
            }

            // Procesar opciones del men√∫ principal
            const menuActual = userContext[id].menuActual;
            const menu = menuData[menuActual];
            
            if (menu && menu.options) {
                const optionSeleccionada = menu.options[mensajeRecibido];
                
                if (optionSeleccionada) {
                    // Procesar respuesta
                    if (optionSeleccionada.respuesta) {
                        const tipo = optionSeleccionada.respuesta.tipo;
                        if (tipo === 'text') {
                            await sock.sendMessage(id, { text: optionSeleccionada.respuesta.msg });
                        }   
                        if (tipo === 'image') {
                            await sock.sendMessage(id, { image: optionSeleccionada.respuesta.msg });
                        }
                    }
                    
                    // Manejar acci√≥n especial para asesor
                    if (optionSeleccionada.accion === 'asesor') {
                        userContext[id].conAsesor = true;
                        userContext[id].horaInicioAsesor = Date.now();
                        
                        // Notificar a asesores
                        for (const asesor of advisorNumbers) {
                            await sock.sendMessage(asesor, {
                                text: `üîî *NUEVO CLIENTE REQUIERE ATENCI√ìN*
                                
üì± N√∫mero: ${phoneNumber}
‚è∞ Hora: ${new Date().toLocaleString()}
üí¨ Ha solicitado hablar con un asesor

Por favor, contacta al cliente lo antes posible.`
                            });
                        }
                        return;
                    }
                    
                    // Cambiar a submenu si existe
                    if (optionSeleccionada.submenu) {
                        userContext[id].menuActual = optionSeleccionada.submenu;
                        await enviarMenu(sock, id, optionSeleccionada.submenu);
                    }
                } else {
                    await sock.sendMessage(id, { 
                        text: `‚ùå Opci√≥n no v√°lida. Por favor elige una opci√≥n del men√∫.
                        
üí° Escribe *"menu"* para ver las opciones disponibles.` 
                    });
                }
            } else {
                // Si no hay men√∫ v√°lido, volver al men√∫ principal
                userContext[id].menuActual = "main";
                await menuSeleccion(sock, id, "main");
            }

        } catch (error) {
            console.error('‚ùå Error procesando mensaje:', error);
            await sock.sendMessage(id, { 
                text: 'ü§ñ Disculpa, ocurri√≥ un error. Por favor intenta nuevamente o escribe "menu" para reiniciar.' 
            });
        }
    });

    // ===== LIMPIEZA AUTOM√ÅTICA DE CONTEXTOS INACTIVOS =====
    setInterval(() => {
        const ahora = Date.now();
        const tiempoLimite = 30 * 60 * 1000; // 30 minutos
        
        for (const userId in userContext) {
            if (ahora - userContext[userId].ultimaActividad > tiempoLimite) {
                console.log(`üßπ Limpiando contexto inactivo: ${userId}`);
                delete userContext[userId];
            }
        }
    }, 10 * 60 * 1000); // Ejecutar cada 10 minutos
}

// ===== FUNCIONES AUXILIARES =====

const inicializarContexto = (id) => {
    if (!userContext[id]) {
        userContext[id] = {
            menuActual: "main",
            consultoChatbots: false,
            conAsesor: false,
            esperandoConfirmacion: false,
            servicioSolicitado: null,
            ultimaActividad: Date.now(),
            horaInicioAsesor: null
        };
    }
};

const enviarBienvenida = async (sock, id) => {
    await sock.sendMessage(id, {
        text: `üéâ *¬°Hola! Bienvenido/a a SYSOFT* üöÄ

Tu asistente virtual est√° aqu√≠ para ayudarte.

üí° *Comandos √∫tiles:*
‚Ä¢ *menu* - Ver opciones principales
‚Ä¢ *ayuda* - Obtener ayuda
‚Ä¢ *inicio* - Reiniciar conversaci√≥n

¬øEn qu√© podemos ayudarte hoy? üëá`
    });
};

const enviarAyuda = async (sock, id) => {
    await sock.sendMessage(id, {
        text: `üÜò *CENTRO DE AYUDA SYSOFT*

üìå *Comandos disponibles:*
‚Ä¢ *menu* - Men√∫ principal
‚Ä¢ *ayuda* - Esta ayuda
‚Ä¢ *inicio* - Reiniciar

üéì *Nuestros servicios:*
‚Ä¢ Cursos de programaci√≥n
‚Ä¢ Desarrollo web a medida  
‚Ä¢ Proyectos universitarios
‚Ä¢ Asesor√≠a personalizada

üìû *¬øNecesitas ayuda humana?*
Selecciona la opci√≥n "Contactar Asesor" en el men√∫ principal.

‚ö° *¬øAlgo no funciona?*
Escribe *"inicio"* para reiniciar la conversaci√≥n.`
    });
};

const enviarEstadisticas = async (sock, id) => {
    const totalUsuarios = Object.keys(userContext).length;
    const usuariosActivos = Object.values(userContext).filter(ctx => 
        Date.now() - ctx.ultimaActividad < 30 * 60 * 1000
    ).length;
    const usuariosConAsesor = Object.values(userContext).filter(ctx => ctx.conAsesor).length;

    await sock.sendMessage(id, {
        text: `üìä *ESTAD√çSTICAS DEL BOT*

üë• Usuarios totales: ${totalUsuarios}
üü¢ Usuarios activos (30min): ${usuariosActivos}
üë§ Con asesor: ${usuariosConAsesor}

‚è∞ √öltima actualizaci√≥n: ${new Date().toLocaleString()}`
    });
};

const enviarMensajeMasivo = async (sock, mensaje) => {
    for (const userId in userContext) {
        try {
            await sock.sendMessage(userId, { text: `üì¢ *MENSAJE DE SYSOFT*\n\n${mensaje}` });
            await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar 1 segundo entre mensajes
        } catch (error) {
            console.error(`Error enviando mensaje a ${userId}:`, error);
        }
    }
};

const enviarInfoChatbots = async (sock, id) => {
    // Informaci√≥n del curso
    await sock.sendMessage(id, {
        text: `ü§ñ *CURSO DE CHATBOTS CON NODE.JS + IA (ChatGPT)*

üöÄ Aprende desde cero y lanza tu propio bot inteligente con conexi√≥n a ChatGPT y bases de datos.

üìÜ *Inicio:* Viernes 18 de junio  
üí≥ *Precio Normal:* 120 Bs / $18 USD  
üéÅ *OFERTA ESPECIAL:* 105 Bs / $15 USD

üïò *Horarios por pa√≠s:*
üá¶üá∑ üá∫üáæ üáµüáæ 22:30  
üáßüá¥ üáªüá™ üá©üá¥ üá≥üá± üáµüá∑ üá®üá± 21:30  
üá®üá¥ üáµüá™ üá™üá® 20:30  
üá≤üáΩ üáµüá¶ üá®üá∑ üá∏üáª üá≠üá≥ üá≥üáÆ 19:30

‚è≥ *Duraci√≥n:* 2 d√≠as intensivos
üé• *Modalidad:* Online en vivo (Zoom)
üß† *Requisitos:* Conocimientos b√°sicos de programaci√≥n

üéØ *Lo que aprender√°s:*
‚Ä¢ Desarrollo con Node.js y Baileys
‚Ä¢ Integraci√≥n con ChatGPT API
‚Ä¢ Conexi√≥n a bases de datos
‚Ä¢ Despliegue en servidores
‚Ä¢ Monetizaci√≥n de bots`
    });

    // Enviar PDF del temario
    try {
        await sock.sendMessage(id, {
            document: fs.readFileSync('./public/pdf/temario-chat-bot.pdf'),
            fileName: 'Temario_Curso_ChatBot.pdf',
            mimetype: 'application/pdf',
            caption: 'üìé Temario completo del curso'
        });
    } catch (error) {
        console.log('‚ö†Ô∏è No se pudo enviar el PDF del temario');
    }

    // Pregunta final
    await sock.sendMessage(id, {
        text: `üéØ *¬øListo para convertirte en un experto en ChatBots?*

Responde *"INSCRIBIRME"* o *"SI"* para recibir los m√©todos de pago.

‚è∞ ¬°Cupos limitados!`
    });
};

const enviarInfoProyectosUniversitarios = async (sock, id) => {
    await sock.sendMessage(id, { 
        image: fs.readFileSync('./public/img/QRpago.jpeg'),
        caption: `üéì *DESARROLLO DE PROYECTOS UNIVERSITARIOS*

üë®‚Äçüéì Te ayudamos con tu proyecto de grado, tesis o trabajos acad√©micos relacionados con programaci√≥n y tecnolog√≠a.

üí° *Servicios incluidos:*
‚Ä¢ Desarrollo de aplicaciones web completas
‚Ä¢ Sistemas de gesti√≥n empresarial
‚Ä¢ APIs RESTful y bases de datos
‚Ä¢ Documentaci√≥n t√©cnica profesional
‚Ä¢ Asesor√≠a durante todo el proceso
‚Ä¢ Presentaciones y defensas

üèÜ *Tecnolog√≠as que manejamos:*
‚Ä¢ Laravel, Node.js, React, Vue.js
‚Ä¢ PHP, JavaScript, Python
‚Ä¢ MySQL, PostgreSQL, MongoDB
‚Ä¢ Bootstrap, Tailwind CSS

üí∞ *Precios especiales para estudiantes*
üìû *Consulta gratuita incluida*
‚è∞ *Entrega garantizada en fechas acordadas*

üì≤ ¬øTe interesa? Responde *"SI"* para recibir m√°s informaci√≥n y presupuesto personalizado.` 
    });
    
    userContext[id].esperandoConfirmacion = true;
    userContext[id].servicioSolicitado = 'Proyecto Universitario';
};

const enviarInfoDesarrolloWeb = async (sock, id) => {
    await sock.sendMessage(id, { 
        image: fs.readFileSync('./public/img/QRpago.jpeg'),
        caption: `üíª *DESARROLLO WEB PROFESIONAL A MEDIDA*

üöÄ Creamos aplicaciones web personalizadas seg√∫n las necesidades espec√≠ficas de tu negocio.

‚≠ê *Nuestros servicios incluyen:*
‚Ä¢ P√°ginas web corporativas modernas
‚Ä¢ Tiendas online (E-commerce) completas
‚Ä¢ Sistemas de gesti√≥n empresarial (CRM, ERP)
‚Ä¢ Aplicaciones web interactivas
‚Ä¢ Optimizaci√≥n SEO profesional
‚Ä¢ Hosting y mantenimiento

üèÜ *Stack tecnol√≥gico:*
‚Ä¢ Frontend: React, Vue.js, HTML5, CSS3, JavaScript
‚Ä¢ Backend: Laravel, Node.js, PHP
‚Ä¢ Bases de datos: MySQL, PostgreSQL
‚Ä¢ Cloud: AWS, DigitalOcean

üíº *Incluimos:*
‚Ä¢ Dise√±o responsive (m√≥vil y desktop)
‚Ä¢ Panel de administraci√≥n
‚Ä¢ Capacitaci√≥n para el cliente
‚Ä¢ Soporte t√©cnico 6 meses
‚Ä¢ Certificado SSL gratuito

üìû *Consulta y cotizaci√≥n gratuita*
üéØ *Proyectos desde $200 USD*

üì≤ ¬øListo para digitalizar tu negocio? Responde *"SI"* para comenzar.` 
    });
    
    userContext[id].esperandoConfirmacion = true;
    userContext[id].servicioSolicitado = 'Desarrollo Web';
};

const enviarInfoLaravel = async (sock, id) => {
    await sock.sendMessage(id, { 
        image: fs.readFileSync('./public/img/LARAVEL.jpg'),
        caption: `üöÄ *CURSO DE LARAVEL - PR√ìXIMO LANZAMIENTO*

üìö Curso completo de Laravel desde b√°sico hasta avanzado + desarrollo de APIs profesionales.

üéØ *Temario preliminar:*
‚Ä¢ Fundamentos de Laravel y MVC
‚Ä¢ Eloquent ORM y migraciones
‚Ä¢ Blade templates y componentes
‚Ä¢ Autenticaci√≥n y autorizaci√≥n
‚Ä¢ APIs RESTful con Sanctum
‚Ä¢ Testing y deployment
‚Ä¢ Proyectos reales

üìÖ *Informaci√≥n pr√≥ximamente:*
‚Ä¢ Fecha de inicio definitiva
‚Ä¢ Horarios por zona horaria
‚Ä¢ Precio especial de lanzamiento
‚Ä¢ Bonos y certificaci√≥n

üîî *¬øQuieres ser el primero en enterarte?*
Responde *"SI"* y te avisaremos apenas est√© disponible con un descuento exclusivo del 30%.

üí° *¬°Los primeros 50 inscritos tendr√°n precio especial!*` 
    });
    
    userContext[id].esperandoConfirmacion = true;
    userContext[id].servicioSolicitado = 'Curso Laravel';
};

const enviarQRPago = async (sock, id, servicio) => {
    // Enviar QR de pago
    await sock.sendMessage(id, {
        image: fs.readFileSync('./public/img/QRpago.jpeg'),
        caption: `üí≥ *M√âTODOS DE PAGO - ${servicio}*

üì± *Opciones disponibles:*
‚Ä¢ Transferencia bancaria
‚Ä¢ QR Code (imagen adjunta)
‚Ä¢ Yape (Per√∫)
‚Ä¢ Yape (Bolivia)

üí∞ *Datos bancarios:*
üìß Te enviaremos los datos una vez confirmes el m√©todo.`
    });

    // Enviar instrucciones para completar inscripci√≥n
    await sock.sendMessage(id, {
        text: `üìã *PARA COMPLETAR SU INSCRIPCI√ìN*

Una vez realizado el pago debe enviar:

üì∏ *Foto del comprobante de pago*

üìù *Datos requeridos:*
‚Ä¢ Nombre completo
‚Ä¢ Correo electr√≥nico
‚Ä¢ Pa√≠s
‚Ä¢ Ciudad
‚Ä¢ Edad
‚Ä¢ Celular
‚Ä¢ Empresa/instituci√≥n
‚Ä¢ Posici√≥n en su trabajo
‚Ä¢ Curso al que se inscribe

Saludos cordiales ü§ù`
    });
};

const menuSeleccion = async (sock, id, menukey) => {
    const menu = menuData[menukey];
    if (!menu) return;

    const optionSeleccionado = Object.entries(menu.options)
        .map(([key, option]) => `‚Ä¢ *${key}*: ${option.text}`)
        .join('\n');

    const menuMensaje = `${menu.mensaje}\n\n${optionSeleccionado}\n\nüëÜ *Selecciona una opci√≥n*`;

    try {
        await sock.sendMessage(id, {
            image: fs.readFileSync('./public/img/GIFanuncios.gif'),
            caption: menuMensaje
        });
    } catch (error) {
        // Si no se puede enviar la imagen, enviar solo texto
        await sock.sendMessage(id, { text: menuMensaje });
    }
};

const enviarMenu = async (sock, id, menukey) => {
    const menu = menuData[menukey];
    if (!menu) return;
    
    const optionSeleccionado = Object.entries(menu.options)
        .map(([key, option]) => `‚Ä¢ *${key}*: ${option.text}`)
        .join('\n');

    const menuMensaje = `${menu.mensaje}\n\n${optionSeleccionado}\n\nüëÜ *Selecciona una opci√≥n*`;
    
    try {
        await sock.sendMessage(id, {
            image: fs.readFileSync('./public/img/GIFanuncios.gif'),
            caption: menuMensaje
        });
    } catch (error) {
        await sock.sendMessage(id, { text: menuMensaje });
    }
};

// ===== CONFIGURACI√ìN DE MEN√öS =====
const menuData = {
    main: {
        mensaje: `üéâ *¬°Bienvenido/a a SYSOFT!* üöÄ

Somos tu aliado tecnol√≥gico especializado en programaci√≥n y desarrollo. Aqu√≠ encontrar√°s cursos de alta calidad y servicios profesionales para potenciar tus habilidades.

‚ú® *¬øEn qu√© podemos ayudarte hoy?*`,
        options: {
            A: {
                text: "ü§ñ Informaci√≥n Curso de ChatBots",
                respuesta: { tipo: "text", msg: "" }
            },
            B: {
                text: "üÖ±Ô∏è Informaci√≥n Curso de Laravel",
                respuesta: {
                    tipo: "text",
                    msg: "üìö Pr√≥ximamente: Curso completo de Laravel b√°sico, avanzado y desarrollo de APIs profesionales. ¬°Mantente atento! üöÄ"
                }
            },
            C: {
                text: "üíª Desarrollo de aplicaciones web a medida",
                respuesta: {
                    tipo: "image",
                    msg: fs.readFileSync('./public/img/poster.png')
                }
            },
            D: {
                text: "üéì Desarrollo de proyectos universitarios",
                respuesta: {
                    tipo: "image", 
                    msg: fs.readFileSync('./public/img/poster.png')
                }
            },
            E: {
                text: "üë§ Contactar con un Asesor",
                respuesta: {
                    tipo: "text",
                    msg: `üëã *¬°Perfecto!* Un asesor especializado se pondr√° en contacto contigo muy pronto.

‚è∞ *Tiempo de respuesta:* 5-15 minutos (horario laboral)
üìû *Horario de atenci√≥n:* Lunes a Viernes 9:00 AM - 6:00 PM

Mientras tanto, puedes continuar explorando nuestros servicios. üòä`
                },
                accion: "asesor"
            }
        }
    }
};

// ===== INICIAR EL BOT =====
console.log('ü§ñ Iniciando SYSOFT WhatsApp Bot...');
conectarWhatsapp().catch(error => {
    console.error('‚ùå Error fatal al iniciar el bot:', error);
    process.exit(1);
});